generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String             @id @default(cuid())
  email               String?            @unique
  name                String?
  password            String?
  emailVerified       Boolean            @default(false)
  image               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  phoneNumber         String?            @unique
  phoneNumberVerified Boolean?           @default(false)
  gender              Gender?
  dob                 DateTime?
  resetToken          String?
  resetTokenExpiresAt DateTime?
  city                String?
  primaryPosition     Position?
  preferredFoot       Foot?
  message             String?
  isPlaying           Boolean            @default(false) // New field
  matchesPlayed       Int                @default(0)      // New field
  leaderboardEntries  LeaderboardEntry[]
  matchEvents         MatchEvent[]
  playerStats         PlayerStats[]
  managedTeams        Team[]             @relation("TeamManager")
  managedTournaments  Tournament[]       @relation("TournamentAdmin")
  accounts            Account[]
  sessions            Session[]
  teams               Team[]             @relation("TeamMembers")
  PlayerTournamentStats PlayerTournamentStats[] // New field
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Otp {
  id          String   @id @default(cuid())
  phoneNumber String
  otp         String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  type        String?  @default("VERIFICATION")

  @@map("otp")
}

model Team {
  id                 String             @id @default(uuid())
  name               String
  logo               String?
  description        String?
  abbreviation       String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  managerId          String
  awayFixtures       Fixture[]          @relation("AwayTeam")
  homeFixtures       Fixture[]          @relation("HomeTeam")
  leaderboardEntries LeaderboardEntry[]
  lineups            Lineup[]
  manager            User               @relation("TeamManager", fields: [managerId], references: [id])
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]       @relation("TournamentTeams")
  standings    TournamentStanding[]
}

model Tournament {
  id          String             @id @default(uuid())
  name        String
  logo        String?
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  adminId     String
  fixtures    Fixture[]
  leaderboard LeaderboardEntry[]
  posts       Post[]
  admin       User               @relation("TournamentAdmin", fields: [adminId], references: [id])
  teams       Team[]             @relation("TournamentTeams")
  FixtureContainers FixtureContainer[]
  playerStats        PlayerStats[]  // New field
  playerTournamentStats PlayerTournamentStats[]  // New field
  standings    TournamentStanding[]
}


// Add a new model for tournament standings (points table)
model TournamentStanding {
  id           String     @id @default(uuid())
  tournamentId String
  teamId       String
  played       Int        @default(0)
  won          Int        @default(0)
  drawn        Int        @default(0)
  lost         Int        @default(0)
  goalsFor     Int        @default(0)
  goalsAgainst Int        @default(0)
  goalDifference Int       @default(0)
  points       Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, teamId])
}

// Add this model to your schema
model FixtureContainer {
  id           String     @id @default(uuid())
  tournamentId String
  matchType    String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  subfixtures  Fixture[]  // Relation to subfixtures
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([tournamentId])
}

// Update your existing Fixture model to include these fields
model Fixture {
  id           String        @id @default(uuid())
  tournamentId String
  homeTeamId   String
  awayTeamId   String
  homeScore    Int           @default(0)
  awayScore    Int           @default(0)
  homepenaltyScore Int @default(0)
  awaypenaltyScore Int @default(0)
  date         DateTime
  status       FixtureStatus @default(SCHEDULED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  awayTeam     Team          @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam     Team          @relation("HomeTeam", fields: [homeTeamId], references: [id])
  tournament   Tournament    @relation(fields: [tournamentId], references: [id])
  lineups      Lineup[]
  events       MatchEvent[]
  
  // Add these new fields
  containerId  String?
  container    FixtureContainer? @relation(fields: [containerId], references: [id])
  time         String?
  venue        String?
  
  @@index([containerId])
}

model Lineup {
  id        String        @id @default(uuid())
  fixtureId String
  teamId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  fixture   Fixture       @relation(fields: [fixtureId], references: [id])
  team      Team          @relation(fields: [teamId], references: [id])
  players   PlayerStats[]
}



model PlayerStats {
  id            String   @id @default(uuid())
  playerId      String
  lineupId      String
  position      String?
  isStarting    Boolean  @default(false)
  minutesPlayed Int      @default(0)
  goals         Int      @default(0)
  penaltysGoals Int      @default(0)
  assists       Int      @default(0)
  yellowCards   Int      @default(0)
  redCards      Int      @default(0)
  tournamentId  String?  // Added to track which tournament this match is for
  jerseyNumber  Int?     // Added jersey number field
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lineup        Lineup   @relation(fields: [lineupId], references: [id])
  player        User     @relation(fields: [playerId], references: [id])
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])  // New field
  isOnField Boolean @default(false)
}

model PlayerTournamentStats { // Modified model
  id           String     @id @default(uuid())
  playerId     String
  tournamentId String
  matchesPlayed Int       @default(0)
  minutesPlayed Int       @default(0)
  jerseyNumber  Int?      // Added jersey number field
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  player       User       @relation(fields: [playerId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([playerId, tournamentId])
}


model LeaderboardEntry {
  id           String     @id @default(uuid())
  tournamentId String
  playerId     String
  teamId       String?
  goals        Int        @default(0)
  assists      Int        @default(0)
  saves        Int        @default(0)
  cleanSheets  Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  corners     Int        @default(0)
  fouls        Int        @default(0)
  penaltys     Int        @default(0)
  redCards     Int        @default(0)
  yellowCards  Int        @default(0)
  player       User       @relation(fields: [playerId], references: [id])
  team         Team?      @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
}

model MatchEvent {
  id        String    @id @default(uuid())
  fixtureId String
  type      EventType
  minute    Int
  playerId  String?
  minutesPlayed Int? // Added minutesPlayed field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  metadata  String?
  fixture   Fixture   @relation(fields: [fixtureId], references: [id])
  player    User?     @relation(fields: [playerId], references: [id])
  penaltyOutcome PenaltyOutcome? // New field to track penalty outcome
}

enum PenaltyOutcome {
  SCORED
  MISSED
  SAVED
}

model Post {
  id              String    @id @default(uuid())
  title           String
  content         String
  type            PostType
  reach           Int       @default(0)
  image           String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?   
  createdBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum PostType {
  SPONSOR
  LOCATION
  CAMPUS_TRIBE
  THANK_YOU
  TOURNAMENT     // Added tournament type
  MATCH_REPORT   // Added match report type
  TOURNAMENT_UPDATE // Added tournament update type
  INJURY
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Position {
  STRIKER
  MIDFIELDER
  DEFENDER
  GOALKEEPER
}

enum Foot {
  RIGHT
  LEFT
  BOTH
}

enum FixtureStatus {
  SCHEDULED
  LIVE
  HALF_TIME
  FULL_TIME
  CANCELLED
  OTHERS
}

enum EventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SAVE
  CORNER
  FOUL
  PENALTY
  GOAL_KICK
  OTHER
  OFFSIDE
  OWN_GOAL
}
